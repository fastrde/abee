#!/usr/bin/env node
/**
 * Abee - Meteor-Scaffolding
 * =========================
 * 
 * Abee is a meteor scaffolding application that
 * 
 * - creates your app trough meteor and build a customizable "best practice" directory structure 
 * - adds customizable views/templates to your app (and can delete them too)
 * - adds template based models with propper collection, client-subscription and server-publish (and can delete them too)
 * - generates allow/deny stubs for your collections
 * - adds basic routes in the url -> view/template style.
 * 
 * for you.
 */

var abee       = require('./lib/abee.js');

var create     = abee.create;
var route      = abee.route;
var template   = abee.template;
var collection = abee.collection;
var help       = abee.help;
var page       = abee.page;

var h          = require('./lib/helper.js');
var C          = require('./lib/colors.js');

var cmd        = process.argv[2];

if (cmd && cmd != 'create' && !h.checkMeteor()){
  return;
}
if (cmd && cmd == 'create' && h.isMeteor()){
 h.print("already a meteor app in this directory\n", "error");
 return;
}
switch(cmd) {
  case "abeetize":
    var appName    = process.argv[3];
    var configName = process.argv[4];
    create.abeetize(appName, configName);
  break;

  case "create":
    var appName    = process.argv[3];
    var configName = process.argv[4];
    create.meteorApp(appName, configName);
  break;

  /* TODO: Add config list command to show baseconfigs to choose*/

  case "page":
    var subcmd = process.argv[3];
    var template = process.argv[4];
    switch (subcmd){
      case "add":
          pages = process.argv.splice(5, process.argv.length-4);
          page.add(template, pages);
      break;
      case "remove":
          pages = process.argv.splice(5, process.argv.length-4);
          page.del(template, pages);
      break;

      default:
        h.print("subcommand " + subcmd + " unknown.\n", "error");
      break;      
    }
  break;
  
  
  break;
  case "template":
  case "view": 
    var subcmd    = process.argv[3];
    var viewName  = "";
    var viewGroup = process.argv[process.argv.length - 1];
    switch (subcmd){

      case "add":
        if (process.argv.length == 5){
         viewName = process.argv[4];
         template.add(viewName);
         return;
        }
        for (var i = 4; i < process.argv.length - 1; i++){  
          viewName = process.argv[i];
          if (viewGroup != "."){
            template.add(viewName, viewGroup);
          }else{
            template.add(viewName);
          }
        }
      break;

      case "remove":
        if (process.argv.length == 5){
         viewName = process.argv[4];
         template.del(viewName);
         return;
        }
        for (var i = 4; i < process.argv.length - 1; i++){      
          viewName = process.argv[i];
          if (viewGroup != "."){
            template.del(viewName, viewGroup);
          }else{
            template.del(viewName);
          }

        }
      break;
 
      default:
        h.print("subcommand " + subcmd + " unknown.\n", "error");
      break;
    }
  break;

  case "route":
    var subcmd    = process.argv[3];
    var routeName = process.argv[4];
    switch (subcmd){

      case "add":
        for (var i = 4; i < process.argv.length; i++){  
          routeName = process.argv[i];
          routeName = routeName.split(":");
          //        name          path          template
          //   or   path          template      undefined  
          route.add(routeName[0], routeName[1], routeName[2]);
        }
      break;

      default:
        h.print("subcommand " + subcmd + " unknown.\n", "error");
      break;      
    }
  break;

  case "collection":
    var subcmd    = process.argv[3];
    var modelName = process.argv[4];

    switch (subcmd){
      case "add":
        for (var i = 4; i < process.argv.length; i++){  
          modelName = process.argv[i];
          if (process.argv[i+1] && process.argv[i+1].match(/^\[/)){
            var attr = process.argv[i+1].replace(/(?:["']*)(\w+)(?:["']*)/g,"\"$1\"");
            try {              
              attr = JSON.parse(attr);
            }catch(e){
              h.print("The attributes must specified as [attr1,attr2,attr3]\n");
              return;
            }
            i=i+1;
            collection.add(modelName, attr);
          }else{
            collection.add(modelName);
          }
        }
      break;

      case "remove":
        for (var i = 4; i < process.argv.length; i++){  
          modelName = process.argv[i];
          collection.del(modelName);
        }
      break;

      default:
        h.print("subcommand " + subcmd + " unknown.\n", "error");
      break;      
    }
  break;
  default:
  case "help":
    help();
  break;
}

