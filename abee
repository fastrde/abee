#!/usr/bin/env node
/**
 * Abee - Meteor-Scaffolding
 * =========================
 * 
 * Abee is a meteor scaffolding application that
 * 
 * - creates your app trough meteor and build a customizable "best practice" directory structure 
 * - adds customizable views/templates to your app (and can delete them too)
 * - adds template based models with propper collection, client-subscription and server-publish (and can delete them too)
 * - generates allow/deny stubs for your collections
 * - adds basic routes in the url -> view/template style.
 * 
 * for you.
 */

var argv       = require('optimist')
                 .alias({
                   'p':'pattern',
                   'l':'lang',
                   't':'template',
                   'g':'group',
                   'd':'deleteFiles'
                 })
                 .default({
                   'p':'mvc',
                   'l':'js',
                   'g':false,
                   'd':false
                 })
                 .boolean('d')
                 .argv;

var abee       = require('./lib/abee.js');

var create     = abee.create;
var route      = abee.route;
var template   = abee.template;
var collection = abee.collection;
var help       = abee.help;
var page       = abee.page;
var config     = abee.config;

var h          = require('./lib/helper.js');
var C          = require('./lib/colors.js');

var cmd        = argv._.splice(0, 1)[0];

if (cmd && (cmd != 'create' && cmd != 'help') && !h.checkMeteor()){
  return;
}

if (cmd && cmd == 'create' && h.isMeteor()){
 h.print("already a meteor app in this directory\n", "error");
 return;
}
switch(cmd) {
  case "abeetize":
    var patternName  = argv.pattern;
    var languageName = argv.lang;
    var delFiles     = argv.deleteFiles;
    
    if (patternName && languageName){
      create.abeetize(patternName, languageName, delFiles);
    }else{
      abee.help();
    }
  break;

  case "create":
    var appName     = argv._.splice(0, 1)[0];
    var patternName = argv.pattern;
    var languageName= argv.lang;
    
    if (appName && patternName && languageName){
      create.meteorApp(appName, patternName, languageName);
    }else{
      abee.help();
    }
  break;

  /*case "config":
    var subcmd = argv._.splice(0, 1)[0];
    switch (subcmd){
      case "make":      
          config.make();
      break;
      case "list":      
          config.list();
      break;
      
      default:
        h.print("subcommand " + subcmd + " unknown.\n", "error");
      break;      
    }
  break;

  case "page":
    var subcmd   = argv._.splice(0, 1)[0];
    var template = argv.template;
    switch (subcmd){
      case "add":
          pages = argv._;
          page.add(template, pages);
      break;
      case "del":
      case "remove":
          pages = argv._;
          page.del(template, pages);
      break;

      default:
        h.print("subcommand " + subcmd + " unknown.\n", "error");
      break;      
    }
  break;*/
  
  
  case "template":
  case "view": 
    var subcmd    = argv._.splice(0, 1)[0];
    var views     = argv._;
    var viewName  = "";
    var viewGroup = argv.group;
    
    if (subcmd && views && views.length > 0){
      switch (subcmd){
        case "add":
          template.add(views, viewGroup);
        break;
        case "del":
        case "remove":
          template.del(views, viewGroup);
        break;
 
        default:
          h.print("subcommand " + subcmd + " unknown.\n", "error");
        break;
      }
    }else{
      abee.help();
    }
  break;

  case "route":
    var subcmd      = argv._.splice(0, 1)[0];
    var routestrings = argv._;
 
    if (subcmd && routestrings && routestrings.length > 0){
      switch (subcmd){
        case "add":
        	var routes = [];
        	for (var i = 0; i < routestrings.length; i++) {
        		var routeArray = routestrings[i].split(",");
        		routes.push(routeArray);
        	}     	
            route.add(routes);
        break;
        default:
          h.print("subcommand " + subcmd + " unknown.\n", "error");
        break;      
      }
    }else{
      abee.help();
    }
  break;

  case "collection":
    var subcmd    = argv._.splice(0, 1)[0];
    var modelstrings    = argv._;

    if (subcmd && modelstrings && modelstrings.length > 0){
    
      switch (subcmd){
        case "add":
          var models = [];
          for (var i = 0; i < modelstrings.length; i++){  
            var modelName = modelstrings[i];
            if (modelstrings[i+1] && modelstrings[i+1].match(/^\[/)){
              var attr = modelstrings[i+1].replace(/(?:["']*)(\w+)(?:["']*)/g,"\"$1\"");
              try {              
                attr = JSON.parse(attr);
              }catch(e){
                h.print("The attributes must specified as attr1,attr2,attr3\n");
                return;
              }
              i=i+1;
              var modelObj = {
              	'name': modelName,
              	'attr': attr
              };
            }else{
              var modelObj = {
              	'name': modelName
              };
             }
            models.push(modelObj);
          }
          collection.add(models);
        break;
        case "del":
        case "remove":      
            collection.del(modelstrings);
        break; 
        default:
          h.print("subcommand " + subcmd + " unknown.\n", "error");
        break;      
      }
    }else{
      abee.help();
    }
  break;
  default:
  case "help":
    abee.help();
  break;
}

